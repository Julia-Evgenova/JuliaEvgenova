
class Tile {
  constructor(value, row, col) {
    this.value = value;
    this.row = row;
    this.col = col;
  }
}

class Game {
  constructor(size = 4) {
    this.size = size;
    this.grid = this.createEmptyBoard();
    this.score = 0;
  }

  // —Å–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –ø–æ–ª—è
  createEmptyBoard() {
    return Array.from({ length: this.size }, () => Array(this.size).fill(null));
  }

  // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
  init() {
    this.grid = this.createEmptyBoard();
    this.score = 0;
    this.addRandomTile();
    this.addRandomTile();
    this.saveStateToLocalStorage();
  }

  // –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–ª–∏—Ç–∫—É –Ω–∞ –ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ
  addRandomTile() {
    const emptyCells = [];
    for (let r = 0; r < this.size; r++) {
      for (let c = 0; c < this.size; c++) {
        if (!this.grid[r][c]) emptyCells.push({ r, c });
      }
    }
    if (emptyCells.length) {
      const { r, c } = emptyCells[Math.floor(Math.random() * emptyCells.length)];
      const value = Math.random() < 0.9 ? 2 : 4;
      this.grid[r][c] = new Tile(value, r, c);
    }
  }

  // –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ
  moveLeft() {
    let moved = false;
    for (let r = 0; r < this.size; r++) {
      const row = this.grid[r].filter(tile => tile !== null);
      for (let c = 0; c < row.length - 1; c++) {
        if (row[c] && row[c + 1] && row[c].value === row[c + 1].value) {
          row[c].value *= 2;
          playSound('merge');
          this.score += row[c].value;
          row.splice(c + 1, 1);
        }
      }
      while (row.length < this.size) {
        row.push(null);
      }
      if (!this.grid[r].every((tile, i) => tile === row[i])) {
        moved = true;
      }
      this.grid[r] = row;
    }
    if (moved) {
      this.addRandomTile();
      this.saveStateToLocalStorage();
    }
  }

  // –≤–ø—Ä–∞–≤–æ
  moveRight() {
    let moved = false;
    for (let r = 0; r < this.size; r++) {
      const row = this.grid[r].filter(tile => tile !== null);
      for (let c = row.length - 1; c > 0; c--) {
        if (row[c] && row[c - 1] && row[c].value === row[c - 1].value) {
          row[c].value *= 2;
          playSound('merge');
          this.score += row[c].value;
          row.splice(c - 1, 1);
        }
      }
      while (row.length < this.size) {
        row.unshift(null);
      }
      if (!this.grid[r].every((tile, i) => tile === row[i])) {
        moved = true;
      }
      this.grid[r] = row;
    }
    if (moved) {
      this.addRandomTile();
      this.saveStateToLocalStorage();
    }
  }

  // –≤–≤–µ—Ä—Ö
  moveUp() {
    let moved = false;
    for (let c = 0; c < this.size; c++) {
      const col = [];
      for (let r = 0; r < this.size; r++) {
        if (this.grid[r][c] !== null) {
          col.push(this.grid[r][c]);
        }
      }
      for (let i = 0; i < col.length - 1; i++) {
        if (col[i] && col[i + 1] && col[i].value === col[i + 1].value) {
          col[i].value *= 2;
          playSound('move');
          this.score += col[i].value;
          col.splice(i + 1, 1);
        }
      }
      while (col.length < this.size) {
        col.push(null);
      }
      for (let r = 0; r < this.size; r++) {
        if (this.grid[r][c] !== col[r]) {
          moved = true;
        }
        this.grid[r][c] = col[r];
      }
    }
    if (moved) {
      this.addRandomTile();
      this.saveStateToLocalStorage();
    }
  }

  // –≤–Ω–∏–∑
  moveDown() {
    let moved = false;
    for (let c = 0; c < this.size; c++) {
      const col = [];
      for (let r = 0; r < this.size; r++) {
        if (this.grid[r][c] !== null) {
          col.push(this.grid[r][c]);
        }
      }
      for (let i = col.length - 1; i > 0; i--) {
        if (col[i] && col[i - 1] && col[i].value === col[i - 1].value) {
          col[i].value *= 2;
          playSound('move');
          this.score += col[i].value;
          col.splice(i - 1, 1);
        }
      }
      while (col.length < this.size) {
        col.unshift(null);
      }
      for (let r = 0; r < this.size; r++) {
        if (this.grid[r][c] !== col[r]) {
          moved = true;
        }
        this.grid[r][c] = col[r];
      }
    }
    if (moved) {
      this.addRandomTile();
      this.saveStateToLocalStorage();
    }
  }

  // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ LocalStorage
  saveStateToLocalStorage() {
    const state = {
      grid: this.grid.map(row => row.map(tile => tile ? tile.value : null)),
      score: this.score,
    };
    localStorage.setItem('2048-game', JSON.stringify(state));
  }

  // –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ LocalStorage
  loadStateFromLocalStorage() {
    const state = JSON.parse(localStorage.getItem('2048-game'));
    if (state) {
      this.grid = state.grid.map(row => row.map(value => value ? new Tile(value) : null));
      this.score = state.score;
    } else {
      this.init();
    }
  }
}

// –∑–≤—É–∫
let isMuted = false;         // —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞
let isSoundInitialized = false;
const soundEffects = {
  move: null,
  merge: null
};

// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤—É–∫–æ–≤
function initializeSounds() {
  if (isSoundInitialized) return; // –µ—Å–ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏, –≤—ã—Ö–æ–¥–∏–º
  soundEffects.move = new Audio('move.mp3');
  soundEffects.merge = new Audio('merge.mp3');
  // ¬´—Ç–∏—Ö–æ–µ¬ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–≤—É–∫–∞
  soundEffects.move.play().catch(() => { });
  soundEffects.merge.play().catch(() => { });
  isSoundInitialized = true;
  console.log('–ó–≤—É–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}

// –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞
function playSound(type) {
  if (isMuted || !isSoundInitialized) return;
  const audio = soundEffects[type];
  if (audio) {
    const clone = audio.cloneNode(); // –∫–ª–æ–Ω–∏—Ä—É–µ–º –¥–ª—è ¬´–Ω–∞–∫–ª–∞–¥–æ–∫¬ª
    clone.currentTime = 0;
    clone.play().catch(error => {
      console.error(`–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ (${type}):`, error);
    });
  }
}

// –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const game = new Game();            // –≠–∫–∑–µ–º–ø–ª—è—Ä –∏–≥—Ä—ã
const boardEl = document.getElementById('board');
const scoreEl = document.getElementById('score');
const restartBtn = document.getElementById('restartBtn');
const rulesHeader = document.getElementById('rulesHeader');
const rulesContent = document.getElementById('rulesContent');
const soundButton = document.getElementById('toggle-sound');
const loadingEl = document.getElementById('loading');

// —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
function render() {
  boardEl.innerHTML = '';
  for (let r = 0; r < game.size; r++) {
    for (let c = 0; c < game.size; c++) {
      const tile = game.grid[r][c];
      const cellEl = document.createElement('div');
      cellEl.classList.add('cell');
      if (tile) {
        cellEl.textContent = tile.value;
        // –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∏—Ç–∫–∏ > 2048, –¥–æ–±–∞–≤–∏–º –∫–ª–∞—Å—Å "tile-super"
        cellEl.classList.add(`tile-${tile.value <= 2048 ? tile.value : 'super'}`);
      }
      boardEl.appendChild(cellEl);
    }
  }
  scoreEl.textContent = game.score;
}

// –∫–Ω–æ–ø–∫–∞ –∑–≤—É–∫–∞
soundButton.addEventListener('click', () => {
  isMuted = !isMuted;
  soundButton.classList.toggle('muted', isMuted);
  soundButton.textContent = isMuted ? 'üîá' : 'üîä';
});

// –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—á—ë—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä 
async function sendScoreToServer(score) {
  try {
    const response = await fetch('http://fe.it-academy.by/TestForm.php', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: `score=${score}`,
    });
    if (response.ok) {
      console.log('Score sent successfully!');
    } else {
      console.error('Failed to send score.');
    }
  } catch (error) {
    console.error('Error:', error);
  }
}

// –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
restartBtn.addEventListener('click', () => {
  game.init();
  render();
});

// –ø–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –ø—Ä–∞–≤–∏–ª
rulesHeader.addEventListener('click', () => {
  const isHidden = rulesContent.style.display === 'none';
  rulesContent.style.display = isHidden ? 'block' : 'none';
  rulesHeader.textContent = isHidden ? '–ü—Ä–∞–≤–∏–ª–∞ ‚ñ≤' : '–ü—Ä–∞–≤–∏–ª–∞ ‚ñº';
});

// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤—É–∫–æ–≤ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
document.addEventListener('click', initializeSounds, { once: true });
document.addEventListener('keydown', initializeSounds, { once: true });
document.addEventListener('touchstart', initializeSounds, { once: true });

// –ª–æ–≥–∏–∫–∞ —Å–≤–∞–π–ø–æ–≤ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
let touchStartX = 0, touchStartY = 0;
document.addEventListener('touchstart', (e) => {
  const touch = e.touches[0];
  touchStartX = touch.clientX;
  touchStartY = touch.clientY;
}, { passive: false });

document.addEventListener('touchmove', (e) => {
  e.preventDefault();
}, { passive: false });

document.addEventListener('touchend', (e) => {
  const touch = e.changedTouches[0];
  const deltaX = touch.clientX - touchStartX;
  const deltaY = touch.clientY - touchStartY;

  if (Math.abs(deltaX) > Math.abs(deltaY)) {
    if (deltaX > 50) game.moveRight();
    if (deltaX < -50) game.moveLeft();
  } else {
    if (deltaY > 50) game.moveDown();
    if (deltaY < -50) game.moveUp();
  }
  render();
}, { passive: false });

// –ª–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
document.addEventListener('keydown', (e) => {
  if (['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(e.key)) {
    e.preventDefault();
  }
  switch (e.key) {
    case 'ArrowLeft':
      game.moveLeft();
      break;
    case 'ArrowRight':
      game.moveRight();
      break;
    case 'ArrowUp':
      game.moveUp();
      break;
    case 'ArrowDown':
      game.moveDown();
      break;
  }
  render();
});

// –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', (e) => {
  if (game.grid.some(row => row.some(cell => cell))) {
    e.preventDefault();
    e.returnValue = '';
    sendScoreToServer(game.score);
  }
});

// SPA: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤ (—Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏ –∏–≥—Ä–æ–≤–æ–π)
const startScreen = document.getElementById('startScreen');
const gameContainer = document.getElementById('gameContainer');
const playBtn = document.getElementById('playBtn');
const exitAppBtn = document.getElementById('exitAppBtn');
const exitGameBtn = document.getElementById('exitGameBtn');

// –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω, –∏–≥—Ä–∞ —Å–∫—Ä—ã—Ç–∞
window.addEventListener('load', () => {
  //–∂–¥—ë–º –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
});

//–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ ¬´–ò–≥—Ä–∞—Ç—å –≤ 2048¬ª
playBtn.addEventListener('click', () => {
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—É –∏–∑ localStorage, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
  game.loadStateFromLocalStorage();
  render();
  // —Å–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä—É
  startScreen.style.display = 'none';
  gameContainer.style.display = 'flex';
});

//–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ ¬´–í—ã—Ö–æ–¥¬ª –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º —ç–∫—Ä–∞–Ω–µ
exitAppBtn.addEventListener('click', () => {
  alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–∫—Ä–æ–π—Ç–µ –≤–∫–ª–∞–¥–∫—É –≤—Ä—É—á–Ω—É—é.');
});

//–∫–Ω–æ–ø–∫–∞ ¬´–í—ã–π—Ç–∏¬ª –≤–Ω—É—Ç—Ä–∏ –∏–≥—Ä—ã ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
exitGameBtn.addEventListener('click', () => {
  // –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
  game.saveStateToLocalStorage();
  // —Å–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
  gameContainer.style.display = 'none';
  startScreen.style.display = 'flex';
});
